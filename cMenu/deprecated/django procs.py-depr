class QDjangoTableModel(QAbstractTableModel):
    def __init__(self, tbl:models.Model, flds:List, foreign_keys:List = [], special_processing_flds:Dict[str,Tuple[Callable, Callable]] = {}, filter:Dict[str,Any] = {}, parent = None):
        super().__init__(parent)
        self.headers = flds
        self.queryset = list(tbl.objects.filter(**filter).only(*flds))
        self.foreign_keys = foreign_keys
        self.special_processing = special_processing_flds

    
    def rowCount(self, parent = QModelIndex()):
        return len(self.queryset)
    
    def columnCount(self, parent = QModelIndex()):
        return len(self.headers)
    
    def data(self, index, role = Qt.DisplayRole):
        if not index.isValid():
            return None
        if role == Qt.ItemDataRole.DisplayRole:
            rec = self.queryset[index.row()]
            fldName = self.headers[index.column()]
            value = getattr(rec, fldName, '')
            if fldName in self.foreign_keys:
                value = str(value) if value else ''
            elif fldName in self.special_processing:
                formatter, _ = self.special_processing[fldName]
                if callable(formatter):
                    return formatter(value)
            # endif special field values

            return value
        # endif role
        return None

    def setData(self, index, value, role=Qt.EditRole):
        if not index.isValid():
            return False
        if role == Qt.EditRole:
            rec = self.queryset[index.row()]
            fldName = self.headers[index.column()]

            # Apply special processing for editing if defined
            if fldName in self.special_processing:
                _, editor = self.special_processing[fldName]
                if callable(editor):
                    value = editor(value)

            # Set the field value
            setattr(rec, fldName, value)
            rec.save()
            return True
        return False

 
    def headerData(self, section, orientation, role = Qt.DisplayRole):
        if role == Qt.DisplayRole:
            if orientation == Qt.Orientation.Horizontal:
                return self.headers[section]
            elif orientation == Qt.Orientation.Vertical:
                return str(section+1)
            #endif orientation
        # endif role
        return None


#####################################################
#####################################################
#####################################################


def dictfetchall(cursor:CursorWrapper) -> List[Dict[str,Any]]:
    """
    Return all rows from a cursor as a list of dictionaries.
    Assume the column names are unique.
    """
    columns = [col[0] for col in cursor.description]
    return [
        dict(zip(columns, row))
        for row in cursor.fetchall()
    ]

def namedtuplefetchall(cursor:CursorWrapper, ResultName:str = 'Result') -> List[NamedTuple]:
    "Return all rows from a cursor as a namedtuple"
    desc = cursor.description
    nt_result = namedtuple(ResultName, [col[0] for col in desc])
    return [nt_result(*row) for row in cursor.fetchall()]

def modelobj_to_dict(modelobj:Model) -> Dict[str, Any]:
    # opts = modelobj._meta
    # data = {}
    # for f in chain(opts.concrete_fields, opts.private_fields):
    #     data[f.name] = f.value_from_object(modelobj)
    # for f in opts.many_to_many:
    #     data[f.name] = [i.id for i in f.value_from_object(modelobj)]

    data = {key:val for key, val in modelobj.__dict__.items() if key not in ['_state']}
    return data

class GroupConcat(Aggregate):
    function = 'GROUP_CONCAT'
    allow_distinct = True
    template = '%(function)s(%(distinct)s%(expressions)s%(ordering)s%(separator)s)'

    def __init__(self, expression, distinct=False, ordering=None, separator=None, **extra):
        super().__init__(
            expression,
            distinct='DISTINCT ' if distinct else '',
            ordering=' ORDER BY %s' % ordering if ordering is not None else '',
            separator=' SEPARATOR "%s"' % separator if separator is not None else '',
            output_field=CharField(),
            **extra
        )

